set -g default-terminal "xterm-256color"
#
## Enable mouse support (works for most terminals)
set -g mouse on

## change prefix key 
set-option -g prefix C-b

## set color for pane borders
set -g pane-active-border-style fg="#2f89d4"
set -g pane-border-style fg=white

## set color for status bar
set -g status-style bg="#000000",fg="#2f89d4"

# source the tpm pakcage and run, tpm is used to manage tmux packages
set -g @plugin 'tmux-plugins/tpm'

# navigate with vim motions and switch panes
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"
bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-\' select-pane -l
bind-key -T copy-mode-vi 'C-l' select-pane -R


# sensible changes a bunch of tmux default options 
set -g @plugin 'tmux-plugins/tmux-sensible'



# Start windows and panes at 1, not 0
set -g base-index 1
set -g pane-base-index 1
set-window-option -g pane-base-index 1
set-option -g renumber-windows on
set -g base-index 1
setw -g pane-base-index 1

# # tmux yank
# set -g @plugin 'tmux-plugins/tmux-yank'
#
# # set vi-mode
# # set-window-option -g mode-keys vi
# # keybindings
# # bind-key -T copy-mode-vi v send-keys -X begin-selection
# # bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle
# # bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel
# #
#
# # # # Smart pane switching with awareness of vim splits
# # bind -n C-k run-shell 'tmux-vim-select-pane -U'
# # bind -n C-j run-shell 'tmux-vim-select-pane -D'
# # bind -n C-h run-shell 'tmux-vim-select-pane -L'
# # bind -n C-l run-shell 'tmux-vim-select-pane -R'
# # bind -n "C-\\" run-shell 'tmux-vim-select-pane -l'
#
# # Bring back clear screen under tmux prefix
# # bind C-l send-keys 'C-l'# Smart pane switching with awareness of vim splits
# # bind -n C-k run-shell 'tmux-vim-select-pane -U'
# # bind -n C-j run-shell 'tmux-vim-select-pane -D'
# # bind -n C-h run-shell 'tmux-vim-select-pane -L'
# # bind -n C-l run-shell 'tmux-vim-select-pane -R'
# # bind -n "C-\\" run-shell 'tmux-vim-select-pane -l'
#
# # # Bring back clear screen under tmux prefix
# # bind C-l send-keys 'C-l'# Smart pane switching with awareness of vim splits
# # bind -n C-k run-shell 'tmux-vim-select-pane -U'
# # bind -n C-j run-shell 'tmux-vim-select-pane -D'
# # bind -n C-h run-shell 'tmux-vim-select-pane -L'
# # bind -n C-l run-shell 'tmux-vim-select-pane -R'
# # bind -n "C-\\" run-shell 'tmux-vim-select-pane -l'
#
# # Bring back clear screen under tmux prefix
# bind C-l send-keys 'C-l'
#
# # automatically copy from buffer to clipbpoard
# bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xclip -i -sel clip"
# # move tmux copy buffer into x clipboard
# bind C-y run "tmux save-buffer - | xclip -i"
#
# # open panes in the current working dir
# bind '"' split-window -v -c "#{pane_current_path}"
# bind % split-window -h -c "#{pane_current_path}"
#
# # Copy to clipboard, when using the copy mode
# bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "xclip -sel clip -i"
# bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -sel clip -i"
# bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xclip -sel clip -i"
#
set  -s escape-time 0
#

run '~/.tmux/plugins/tpm/tpm'
